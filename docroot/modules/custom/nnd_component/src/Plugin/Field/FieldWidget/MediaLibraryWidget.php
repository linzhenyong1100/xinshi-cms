<?php

namespace Drupal\nnd_component\Plugin\Field\FieldWidget;

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media_library\MediaLibraryUiBuilder;
use Drupal\views\Views;
use Drupal\media_library\Plugin\Field\FieldWidget\MediaLibraryWidget as CoreMediaLibraryWidget;

/**
 * Plugin implementation of the 'media_library_widget' widget.
 *
 * @FieldWidget(
 *   id = "nnd_media_library_widget",
 *   label = @Translation("NND Media library"),
 *   description = @Translation("Allows you to select items from the media library."),
 *   field_types = {
 *     "entity_reference"
 *   },
 *   multiple_values = TRUE,
 * )
 *
 * @internal
 *   Media Library is an experimental module and its internal code may be
 *   subject to change in minor releases. External code should not instantiate
 *   or extend this class.
 */
class MediaLibraryWidget extends CoreMediaLibraryWidget {


  /**
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return [
        'title' => 'Add or select media',
        'width' => '75%',
        'height' => '75%',
        'description=' => 0,
        'border' => 0,
        'hidden_title' => 0,
        'view' => 'media_library',
        'display_id' => '',
        'widget_grid' => '4',
      ] + parent::defaultSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {
    $form = parent::settingsForm($form, $form_state);
    $form['title'] = [
      '#type' => 'textfield',
      '#title' => t('Media dialog title'),
      '#default_value' => $this->getSetting('title'),
    ];

    $form['width'] = [
      '#type' => 'textfield',
      '#title' => t('Media dialog width'),
      '#default_value' => $this->getSetting('width'),
    ];

    $form['height'] = [
      '#type' => 'textfield',
      '#title' => t('Media dialog height'),
      '#default_value' => $this->getSetting('height'),
    ];

    $form['description'] = [
      '#type' => 'checkbox',
      '#title' => t('Display description'),
      '#default_value' => $this->getSetting('description'),
    ];

    $form['border'] = [
      '#type' => 'checkbox',
      '#title' => t('Display media selection wrapper border'),
      '#default_value' => $this->getSetting('border'),
    ];

    $form['hidden_title'] = [
      '#type' => 'checkbox',
      '#title' => t('Hidden field widget title'),
      '#default_value' => $this->getSetting('hidden_title'),
    ];

    $form['widget_grid'] = [
      '#title' => $this->t('Display media items per row of widget'),
      '#type' => 'select',
      '#options' => ['1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '10' => 10, '12' => 12],
      '#default_value' => $this->getSetting('widget_grid') ?: 4,
    ];

    $view_list = [];
    foreach (Views::getAllViews() as $key => $view) {
      if ($view->status() && $view->get('base_table') == 'media_field_data') {
        $view_list[$key] = $view->label();
      }
    }
    $form['display_id'] = [
      '#title' => $this->t('View'),
      '#type' => 'select',
      '#options' => $this->getViewDisplays($this->getSetting('view')),
      '#default_value' => $this->getSetting('display_id'),
      '#empty_option' => $this->t('- Select -'),
      '#empty_value' => '',
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function settingsSummary() {
    $summary = parent::settingsSummary(); // TODO: Change the autogenerated stub
    if ($value = $this->getSetting('title')) {
      $summary[] = $this->t('Media dialog title : @title', ['@title' => $value]);
    }
    if ($value = $this->getSetting('width')) {
      $summary[] = $this->t('Media dialog width : @width', ['@width' => $value]);
    }
    if ($value = $this->getSetting('height')) {
      $summary[] = $this->t('Media dialog height : @height', ['@height' => $value]);
    }

    $summary[] = $this->t('Display description : @value', ['@value' => t($this->getSetting('description') ? "Yes" : "No")]);
    $summary[] = $this->t('Display media selection wrapper border : @value', ['@value' => t($this->getSetting('border') ? "Yes" : "No")]);
    $summary[] = $this->t('Hidden field widget title : @value', ['@value' => t($this->getSetting('hidden_title') ? "Yes" : "No")]);
    $summary[] = $this->t('Display media items per row of widget : @value', ['@value' => $this->getSetting('widget_grid')]);


    return $summary;
  }

  /**
   * {@inheritdoc}
   */
  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
    $element = parent::formElement($items, $delta, $element, $form, $form_state); // TODO: Change the autogenerated stub
    $element['#attached']['library'][] = 'nnd_component/media_library_widget';

    $element['media_library_open_button']['#value'] = t('Add @title', ['@title' => $element['#title']]);
    $element['media_library_open_button']['#weight'] = -99;
    $element['media_library_update_widget']['#weight'] = -98;
    $element['media_library_update_widget']['#attributes']['class'][] = 'hidden';

    $element['empty_selection']['#weight'] = 0;
    $element['selection']['#weight'] = 99;
    $element['selection']['#attributes']['class'][] = 'nnd-media-library-selection';
    $element['selection']['#attributes']['class'][] = 'media-library-selection-widget';
    $element['selection']['#attributes']['class'][] = 'media-library-selection-col-' . $this->getSetting('widget_grid');
    if ($this->getSetting('border') && isset($element['selection'][0])) {
      $element['selection']['#attributes']['class'][] = 'media-library-selection-border';
    }
    $element['#field_prefix']['weight_toggle']['#access'] = FALSE;
    $element['#attributes']['class'][] = 'fieldgroup';
    $element['#attributes']['class'][] = 'nnd-media-library';
    if ($this->getSetting('hidden_title')) {
      $element['#title'] = '';
    }
    if (empty($this->getSetting('description'))) {
      $element['#description'] = '';
      $element['#field_prefix']['empty_selection']['#access'] = FALSE;
    }

    return $element;
  }

  /**
   * {@inheritdoc}
   */
  public static function openMediaLibrary(array $form, FormStateInterface $form_state) {
    $triggering_element = $form_state->getTriggeringElement();
    $library_ui = \Drupal::service('media_library.ui_builder')->buildUi($triggering_element['#media_library_state']);
    $dialog_options = MediaLibraryUiBuilder::dialogOptions();

    $parameters = $triggering_element['#media_library_state']->get('media_library_opener_parameters');
    $display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load($parameters['entity_type_id'] . '.' . $parameters['bundle'] . '.default');
    $settings = $display->get('content')[$parameters['field_name']]['settings'];
    $dialog_options['title'] = $settings['title'] ? $settings['title'] : $dialog_options['title'];
    $dialog_options['width'] = $settings['width'];
    $dialog_options['height'] = $settings['height'];
    $display_id = $settings['display_id'];
    if ($display_id) {
      $library_ui['content']['view']['#display_id'] = $display_id;
      $view = Views::getView($settings['view']);
      $view->setDisplay($display_id);
      $view->setArguments($library_ui['content']['view']['#view']->args);
      $view->execute($display_id);
      $library_ui['content']['view']['#view'] = $view;
    } elseif (empty($display_id)) {
      unset($library_ui['content']['view']);
    }

    return (new AjaxResponse())
      ->addCommand(new OpenModalDialogCommand($dialog_options['title'], $library_ui, $dialog_options));
  }

  /**
   * Get displays for a particular view.
   *
   * @param string $view_id
   *   The view ID.
   *
   * @return array
   *   An array containing displays for the view.
   */
  protected function getViewDisplays($view_id) {
    $options = [];
    $view_plugins = ['page', 'block'];
    /** @var \Drupal\views\Entity\View $view */
    if ($view = \Drupal::service('entity.manager')->getStorage('view')->load($view_id)) {
      if ($displays = $view->get('display')) {
        foreach ($displays as $display) {
          if (in_array($display['display_plugin'], $view_plugins, TRUE)) {
            $options[$display['id']] = $display['display_title'];
          }
        }
      }
    }
    return $options;
  }
}
