<?php
/**
 * @file
 * This file is used to write hooks that used in the module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Serialization\Json;
use Drupal\dyniva_core\CcmsCoreEntityModerateAccess;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\TypedData\TranslatableInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\dyniva_core\TransliterationHelper;

/**
 * Implements hook_form_alter().
 */
function nnd_manage_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'nnd_manage_json_validate';
}

/**
 * Implements hook_form_alter().
 */
function nnd_manage_form_block_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['revision_information']['#access'] = FALSE;
  $form['#validate'][] = 'nnd_manage_json_validate';
}

/**
 * Validate json format.
 * @param array $form
 * @param FormStateInterface $form_state
 */
function nnd_manage_json_validate(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  foreach ($form_state->getValues() as $field => $value) {
    if ($entity->hasField($field) && $entity->get($field)->getFieldDefinition()->getType() == 'text_with_summary' && $entity->get('body')->getFieldDefinition()->getTargetBundle() == 'json') {
      foreach ($value as $item) {
        if (!empty($item['value']) && empty(Json::decode($item['value']))) {
          $form_state->setErrorByName($field, t('Invalid JSON format'));
        }
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function nnd_manage_entity_operation_alter(&$operations, EntityInterface $entity) {

  $current_path = \Drupal::service('path.current')->getPath();
  if(!preg_match('#^/manage/#', $current_path)) return ;

  $language = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT);
  if ($entity instanceof TranslatableInterface){
    $language = $entity->language();
    if($translation = TransliterationHelper::getLatestTranslationAffectedRevision($entity, $language->getId())){
      $entity = \Drupal::entityManager()->getTranslationFromContext($translation, $language->getId(), ['operation' => 'entity_upcast']);
    }
  }

  if ($managedEntity = dyniva_core_get_entity_managed_entity($entity)) {
    $weight = 0;
    unset($operations['translate']);
    if (isset($entity->_deleted) && $entity->_deleted->value) {
      $operations = [];
      $url = Url::fromRoute('nnd_manage.restore.form', [
        'entity_type_id' => $managedEntity->get('entity_type'),
        'entity_id' => $entity->id(),
      ], [
        'language' => $language,
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access) {
        $operations['restore'] = [
          'title' => t('Restore'),
          'url' => $url,
          'weight' => $weight++,
        ];
      }
      $url = Url::fromRoute('nnd_manage.purge.form', [
        'entity_type_id' => $managedEntity->get('entity_type'),
        'entity_id' => $entity->id(),
      ], [
        'language' => $language,
      ]);
      $access = \Drupal::accessManager()->checkNamedRoute($url->getRouteName(), $url->getRouteParameters());
      if ($access) {
        $operations['delete'] = [
          'title' => t('Purge'),
          'url' => $url,
          'weight' => $weight++,
        ];
      }
    }
  }
}